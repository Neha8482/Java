import java.util.ArrayList;
import java.util.Stack;
class BinaryTreeNode {
    public Integer data;
    public BinaryTreeNode left;
    public BinaryTreeNode right;

    BinaryTreeNode(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

class Solution
{
    public static ArrayList<Integer> preOrder(BinaryTreeNode node){
        ArrayList<Integer> li = new ArrayList<>();
        if(node == null);
        return li;
        li.add(node.data);
        li.addAll(preOrder(node.left));
        li.addAll(preOrder(node.right));
        return li;
    }
    public static ArrayList<Integer> treeFromBracket(String str)
    {
        BinaryTreeNode node = new BinaryTreeNode(Integer.parseInt(Character.toString(str.charAt(0))));
        Stack<BinaryTreeNode> s = new Stack<>();
        s.push(node);
        int i =1;
       while(i<str.length()){
          if(str.charAt(i) == '('){
              i=i+1;
              BinaryTreeNode n = BinaryTreeNode(Integer.parseInt(Character.toString(str.charAt(0))));
              BinaryTreeNode rt = s.peek();
              if(rt.left == null)
              rt.left(n);
              else
              rt.right(n);
              s.push(n);
              i=i+1;
          }
          else if(str.charAt(i) == ")"){
               s.pop();
               i=i+1;
           }
       }
        ArrayList<T> t = preOrder(node);
        return t;
        
    }
}


public class BTreefromString {

}
